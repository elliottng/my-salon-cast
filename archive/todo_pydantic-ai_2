Phase 2 Plan: Migrate research_persona_async to Structured Outputs
Phase 2 Overview
Once Phase 1 is complete and generate_text_async supports structured outputs, Phase 2 will convert research_persona_async to use result_type=PersonaResearch, eliminating its JSON parsing complexity.
Current State Analysis
research_persona_async Current Implementation
pythonasync def research_persona_async(self, source_text: str, person_name: str) -> PersonaResearch:
    # Constructs complex 300+ line prompt
    json_response_str = await self.generate_text_async(prompt, timeout_seconds=420)
    
    # Manual JSON cleaning and parsing
    cleaned_response_text = self._clean_json_string_from_markdown(json_response_str)
    parsed_json = json.loads(cleaned_response_text)
    parsed_json = GeminiService._clean_keys_recursive(parsed_json)
    
    # Manual voice assignment and persona enhancement
    # Complex logic for gender, invented names, TTS voice assignment
    
    # Manual PersonaResearch object creation
    persona_research_data = PersonaResearch(**parsed_json)
Complexity Factors

Large Complex Prompt: 300+ line template with detailed instructions
Post-Processing Logic: Gender assignment, voice selection, invented name logic
TTS Integration: Voice ID assignment and parameters
Error Handling: Multiple exception types and validation steps

Phase 2 Design Decisions
Scope Definition

Target: Convert research_persona_async to use result_type=PersonaResearch
Constraint: Maintain identical PersonaResearch output objects
Approach: Gradual refactor preserving all existing post-processing logic

Implementation Strategy
Option A: Direct Conversion (Recommended)
pythonasync def research_persona_async(self, source_text: str, person_name: str) -> PersonaResearch:
    # Keep existing complex prompt construction
    prompt = f"""...{existing 300+ line prompt}..."""
    
    # NEW: Get structured output directly
    persona_research = await self.generate_text_async(prompt, result_type=PersonaResearch)
    
    # Keep all existing post-processing logic:
    # - Voice assignment
    # - Gender normalization  
    # - TTS parameter selection
    # - Invented name assignment
    
    return persona_research
Benefits: Eliminates JSON parsing while preserving all business logic
Post-Processing Preservation
The complex voice assignment and persona enhancement logic in podcast_workflow.py should remain unchanged:

Gender assignment and normalization
Invented name selection from predefined lists
TTS voice ID and parameter assignment
Host persona creation
persona_details_map coordination

Phase 2 Implementation Plan
Phase 2.1: Analysis & Preparation

 Code Analysis:

 Document current research_persona_async behavior completely
 Identify all post-processing steps that must be preserved
 Map the current prompt structure and expected JSON schema
 Verify PersonaResearch model matches expected LLM output format


 Dependency Analysis:

 Confirm Phase 1 generate_text_async with result_type is working correctly
 Test structured output with PersonaResearch model
 Validate that TTS service integration remains unchanged



Phase 2.2: Implementation

 Convert Method:

 Replace json_response_str = await self.generate_text_async(prompt, timeout_seconds=420)
 With persona_research = await self.generate_text_async(prompt, result_type=PersonaResearch)
 Remove all JSON parsing logic:

 Eliminate _clean_json_string_from_markdown() call
 Remove json.loads() and error handling
 Remove _clean_keys_recursive() call
 Remove manual PersonaResearch(**parsed_json) creation




 Preserve Business Logic:

 Keep all existing prompt construction logic
 Maintain 420-second timeout (if needed for this method specifically)
 Preserve all error handling patterns
 Keep all existing logging statements



Phase 2.3: Workflow Integration Verification

 Post-Processing Validation:

 Verify podcast_workflow.py persona processing remains unchanged
 Test gender assignment and voice selection logic
 Validate invented name assignment continues working
 Confirm persona_details_map population is identical


 TTS Integration:

 Test that voice ID assignment works correctly
 Verify TTS parameter selection remains functional
 Validate Host persona creation is unaffected



Phase 2.4: Testing & Validation

 Unit Testing:

 Test research_persona_async produces identical PersonaResearch objects
 Validate all persona fields are populated correctly
 Test error scenarios and exception handling
 Verify timeout behavior (420s vs 300s standardization decision needed)


 Integration Testing:

 Test full persona research workflow with real Gemini calls
 Validate workflow orchestration remains unchanged
 Test persona voice assignment and TTS integration
 Verify persona_details_map coordination


 Regression Testing:

 Ensure analyze_source_text_async (Phase 1) continues working
 Verify other methods remain unchanged
 Test complete podcast generation pipeline



Phase 2.5: Observability Enhancement

 Logfire Metrics:

 Add persona-specific observability metrics
 Track persona research success/failure rates
 Monitor persona processing performance
 Add voice assignment success tracking


 Monitoring:

 Update dashboards for persona research metrics
 Add alerting for persona research failures
 Monitor post-processing logic performance



Phase 2 Design Questions
Timeout Standardization

Current: research_persona_async uses 420-second timeout
Phase 1: Standardized 300-second timeout for all calls
Decision Needed: Should persona research use 300s or remain at 420s?

Prompt Preservation

Current: 300+ line detailed prompt with specific JSON format instructions
Question: Should we keep the existing prompt or optimize it for Pydantic AI structured outputs?
Recommendation: Keep existing prompt in Phase 2, optimize in later phase

Error Handling

Current: Complex error handling for JSON parsing failures
Phase 2: Simplified error handling with structured outputs
Preservation: Maintain same exception types for workflow compatibility

Success Criteria
Functional Requirements

 research_persona_async produces identical PersonaResearch objects
 All persona post-processing logic continues working unchanged
 Voice assignment and TTS integration remains functional
 Workflow orchestration requires no changes
 Performance matches or improves current implementation

Code Quality Requirements

 All JSON parsing code eliminated from research_persona_async
 Existing logging and error handling preserved
 Post-processing business logic remains in workflow layer
 Type safety maintained throughout

Integration Requirements

 persona_details_map population remains identical
 TTS service integration continues working
 Host persona creation unaffected
 Complete podcast generation pipeline functional

Risk Assessment
Low Risk ðŸŸ¢

JSON parsing elimination (proven pattern from Phase 1)
Structured output validation (using existing PersonaResearch model)

Medium Risk ðŸŸ¨

Complex post-processing logic preservation
TTS integration dependencies
Timeout behavior changes (if standardizing to 300s)

High Risk ðŸ”´

Workflow orchestration changes (AVOID - keep post-processing in workflow)

Recommended Timeline

Phase 2.1-2.2: 1-2 weeks (analysis and core implementation)
Phase 2.3: 1 week (integration verification)
Phase 2.4: 1-2 weeks (comprehensive testing)
Phase 2.5: 1 week (observability and deployment)

Total Estimated Duration: 4-6 weeks
Future Phases Preview

Phase 3: generate_podcast_outline_async â†’ result_type=PodcastOutline
Phase 4: Evaluate generate_dialogue_async (more complex output structure)
Phase 5: Remove all legacy JSON parsing infrastructure

This plan ensures Phase 2 builds incrementally on Phase 1 success while maintaining the proven approach of preserving all existing business logic and workflow integration.