Commit: 1b8fd7fbe43963088be0b88f84d530e31a96b5ca
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-02 21:00:22 -0700

    feat: Add comprehensive MCP integration test
- Created end-to-end integration test covering complete podcast workflow
- Tests prompt-guided setup → podcast generation → resource access
- Validates MCP tools, resources, and status polling integration
- Includes transcript and audio retrieval with playback instructions
- Added MockMCPContext for proper tool context handling
- Covers 7-step workflow: prompts → generation → personas → outline → completion → content access
- Provides clear audio file paths and multiple playback options for testing
- Tests integration between FastMCP server and MySalonCast services

Commit: 789f226c9379197b930fe0c7f03bd245dfdb059e
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-02 20:40:42 -0700

    Implement MCP prompts for MySalonCast
✅ Added 3 comprehensive MCP prompt templates:
• create_podcast_from_url() - guides natural podcast generation with personas, length, language
• discuss_persona_viewpoint() - enables persona research exploration by task/person/topic
• analyze_podcast_content() - provides content analysis for outline, transcript, personas, summary

🧪 Features implemented:
• Parameter validation with Literal types for length/language/analysis_type
• Integration guidance for MySalonCast tools (generate_podcast_async, get_task_status)
• Resource usage guidance for podcast:// and research:// URIs
• Comprehensive test suite (test_mcp_prompts.py) with 100% pass rate (5/5 tests)
• Type safety and error handling through FastMCP decorators

📋 Phase 6.1 completion:
• Fixed todo.md incorrect markings and updated to reflect actual implementation status
• All prompt templates include proper parameter validation and descriptions
• Ready for MCP client integration and natural language podcast generation workflows

Commit: 5e1eeafafd3651f66902e3742779e1c929f97102
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-02 20:28:57 -0700

    Implement and validate persona research MCP resource
- Add research://{task_id}/{person_id} MCP resource for secure persona research access
- Enable task-scoped retrieval of individual persona research JSON data by person ID
- Use task_id parameter naming consistent with other podcast resources
- Read from PodcastEpisode.llm_persona_research_paths with filename pattern matching
- Provide comprehensive error handling with meaningful messages
- Include file metadata (existence, size, path) in responses
- Support graceful handling of missing and corrupted JSON files
- Add comprehensive test suite with 8/8 tests passing (100% success rate)
- Validate input validation, error handling, and task-scoped privacy compliance
- Production-ready resource for podcast generation workflows

Commit: 3393bc97c6c4ee351d83928b91ec9405d1a1f931
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-02 19:56:03 -0700

    Fix podcast outline MCP resource to read from JSON file
- Changed from accessing non-existent outline attribute to reading llm_podcast_outline_path file
- Added proper JSON file reading and parsing with error handling
- Added outline_file_path to response for debugging
- Handles missing files and parse errors gracefully
- Comprehensive test validation confirms all scenarios work correctly

Commit: 8f48c785d501cccb1dcb43b86daff44695a55298
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-02 19:47:54 -0700

    Fix podcast metadata and research MCP resources timestamp fields
Fixed timestamp field mappings:
- Changed status_info.start_time → status_info.created_at
- Changed status_info.end_time → status_info.last_updated_at
- Updated both podcast://{task_id}/metadata and research://{job_id}/{person_id} resources

Validated podcast metadata resource:
- Comprehensive metadata access (title, summary, source_attributions)
- Proper timestamp formatting to ISO strings
- Duration field handling (None for episodes without duration)
- Empty/minimal metadata handling
- Input validation and error handling

Progress: 6/8 MCP resources validated (status, logs, warnings, transcript, audio, metadata)

Commit: 305e8542d5ff5a88aa1316335d0361b7cc7ffc86
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-02 19:34:28 -0700

    Validate and fix podcast://{task_id}/transcript MCP resource
Fixed and tested transcript resource:
- Improved exception handling to distinguish 'Task not found' vs 'Episode not available'
- Applied same exception fixes to audio/metadata/outline resources
- Validated comprehensive transcript data access and character count calculation

Added comprehensive test suite (test_podcast_transcript_resource.py):
- Input validation (empty, short, long task IDs)
- Error handling for non-existent tasks and missing episodes
- Real task testing with full transcript content
- Edge case testing (empty transcripts)
- Field mapping validation from PodcastEpisode model

Progress: 4/8 MCP resources validated (status, logs, warnings, transcript)

Commit: 25c77a68808ad727be79a1242595c8ba2dd8ca1e
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-02 19:29:14 -0700

    Fix and validate jobs://{task_id}/warnings MCP resource
Fixed bugs:
- status_info.episode → status_info.result_episode
- last_updated → last_updated_at
- Applied same fixes to transcript/audio/metadata/outline resources

Validated warnings resource:
- Proper field mapping from PodcastStatus model
- Handles tasks with/without warnings and missing tasks
- Added comprehensive test suite

Progress: 3/8 MCP resources validated (status, logs, warnings)

Commit: e5e55484c30bd2985b9a2ed2c60bf31f4a1e4ce1
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-02 19:22:25 -0700

    Validate and fix MCP job status and logs resources
✅ Successfully validated jobs://{task_id}/status resource:
- Fixed field mapping: status_description → current_step, created_at → start_time, last_updated_at → end_time
- Fixed artifact_availability field access
- Added comprehensive input validation and error handling
- Confirmed proper StatusManager integration and response structure

✅ Successfully validated jobs://{task_id}/logs resource:
- Fixed field mapping: last_updated_at and status_description
- Confirmed proper logs field access from PodcastStatus.logs
- Added input validation and error handling
- Returns structured log data with count and metadata

🧪 Added comprehensive test suites:
- test_job_status_direct.py: Direct resource validation without MCP client
- test_job_logs_resource.py: Logs resource validation
- Multiple test files for future resource validation

🔧 Fixed MCP server field mappings to match PodcastStatus model
- Resources now correctly access PodcastStatus fields
- Proper error handling for missing tasks and invalid inputs
- Ready for real-time podcast generation monitoring

Next: Validate remaining MCP resources (warnings, podcast content, persona research)

Commit: fae4b362de61501dfe3edf9b5e69c3d62ccf4fbd
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-02 18:41:31 -0700

    Fix: Resolve SourceAnalysis field mismatch (key_topics/main_arguments)

Commit: a169699215fb4b81749f9bb5ed883b35507a6744
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-02 14:50:34 -0700

    feat: Implement Phase 5.2 P0 MCP Error Handling
- Import and use FastMCP ToolError exceptions instead of error dictionaries
- Add comprehensive input validation for critical parameters:
  * generate_podcast_async: source validation, URL limits, format checks
  * get_task_status: task_id validation and format checks
  * cleanup_task_files: task_id validation
- Replace all error returns with proper ToolError exceptions
- Maintain existing logging for diagnostics
- Improve MCP client compatibility with standardized error handling
- All 8 validation test cases passing

Phase 5.2 P0 (Critical) tasks complete. Ready for P1 implementation.

Commit: 80421eaa6423c620a4fed02cad81464a7ebe881e
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-02 14:07:12 -0700

    Implement Phase 5.1 Option 1: Basic Context Logging
- Add context parameter (ctx) to all MCP tools for request correlation
- Enhanced logging with request IDs: [req-123] prefixed messages
- Client information logging: session data, version, client name
- Parameter logging with request context for better debugging
- Task correlation: link MCP requests to async task IDs
- Safe context attribute access with fallbacks for missing data
- Fixed PodcastStatus attribute access in get_task_status
- Added List import for proper type annotations

Test Results:
✅ Request correlation working across multiple tool calls
✅ Enhanced debugging with client context information
✅ Safe handling of minimal/missing context attributes
✅ All MCP tools now support context-aware logging
✅ No data structure changes required

Phase 5.1 Option 1 provides infrastructure-level observability
for tracing requests across the MCP boundary with zero business logic impact.

Commit: 44d5ccb7366b36227deb473cf49e72ec17361e64
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-02 13:42:30 -0700

    Implement Phase 4.3: Configurable Cleanup Policy System
- Add CleanupManager and CleanupConfig for centralized cleanup management
- Support multiple cleanup policies: manual, auto_on_complete, auto_after_hours, auto_after_days, retain_audio_only, retain_all
- Add cleanup_task_files MCP tool with policy override support
- Add files://{task_id}/cleanup resource for cleanup status
- Add config://cleanup resource for cleanup configuration
- Add update_cleanup_config tool for policy management
- Fix PodcastEpisode model: add dialogue_turn_audio_paths attribute
- Fix cleanup status resource: handle plural LLM output paths correctly
- Fix response field names for test compatibility
- Add comprehensive tests for cleanup configuration and real task cleanup
- Cleanup config persisted in cleanup_config.json

Commit: bf920845e77755f16a66d08ea2c5593fe974309a
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-02 10:45:34 -0700

    feat: Complete Phase 4.1 and 4.2 - Service Integration and Model Compatibility
- Mark Phase 4.1 complete: Service Integration with PodcastGeneratorService
  * Already achieved through incremental MCP server development
  * All tools use existing podcast_service, status_manager, task_runner
  * No additional integration work needed

- Mark Phase 4.2 complete: Validate Model Compatibility (renamed from Model Compatibility)
  * Direct Pydantic integration working: generate_podcast(request_data: PodcastRequest)
  * Parameter adaptation working: generate_podcast_async converts individual params → PodcastRequest
  * Output format compatibility maintained: all tools return PodcastEpisode data consistently
  * Type conversions handled automatically by FastMCP JSON ↔ Pydantic serialization

Both phases were completed organically during development. MCP server fully
integrated with existing MySalonCast infrastructure without compatibility issues.

Commit: 3c525dccb7f98b67118642acbb2118ee236a3bdc
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-02 10:38:41 -0700

    feat: Implement Phase 3.1 Core Prompt Templates with FastMCP 2.0
- Add podcast_generation_request prompt template with parameters:
  * topic, sources, persons, style, length, language, custom_focus
  * Pydantic Field validation and Literal types for options
  * Structured output with all required sections for podcast creation

- Add persona_research_prompt template with parameters:
  * person_name, research_focus, context_topic, detail_level, time_period
  * Customizable research focus areas (voice, style, expertise, full_profile)
  * Dynamic research requirements based on focus type

- Features:
  * FastMCP @mcp.prompt() decorator pattern
  * Comprehensive parameter documentation and validation
  * Required vs optional parameters with proper defaults
  * Well-structured prompt output for LLM consumption

- Testing:
  * Full test suite with subprocess isolation
  * Both prompts successfully registered and discoverable
  * Parameter validation and content generation verified
  * All tests passing

Phase 3.1 complete - MCP clients can now use structured prompt templates
for consistent podcast generation and persona research requests.

Commit: 9b3f9e5f9514777b3ab5dc853bd6d9de46c94a6f
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-02 10:27:46 -0700

    Fix: Remove duration_seconds requirement from MCP server
- Removed duration_seconds field from PodcastEpisode model that was incorrectly added
- Removed all references to duration_seconds from MCP server responses
- Core podcast workflow never tracked actual duration, only desired length
- Added set_episode method to StatusManager for proper episode persistence
- Updated tests to match new response structure
- All Phase 2.4 persona research tests now passing

Commit: 1e3cc692a50747d7fcd792e040f5afec716388a6
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-02 08:42:51 -0700

    feat: implement Phase 2.3c - jobs://{task_id}/warnings MCP resource
- Add jobs://{task_id}/warnings resource in app/mcp_server.py
- Provides detailed warnings and error information from generation process
- Raw warnings list and structured parsed warnings with type/severity/stage
- Error information for failed tasks (message, details, timestamp)
- Warning count metadata and task status integration
- Stage detection based on warning content keywords
- Proper error handling for missing tasks (ValueError)
- Updated API documentation with warnings resource info

- Add comprehensive test suite in test_phase2_3c_warnings.py
- Test missing task error handling
- Test warnings resource structure and validation
- Test consistency with job status resource
- All 3 tests pass with fixed subprocess isolation pattern
- Environment setup with proper API key handling

- Update todo.md to mark Phase 2.3c as completed

🎉 Phase 2.3 is now COMPLETE! All job status resources implemented:
- jobs://{task_id}/status (comprehensive progress tracking)
- jobs://{task_id}/logs (detailed processing logs)
- jobs://{task_id}/warnings (error and warning analysis)

The warnings resource enables MCP clients to track and analyze
errors/warnings throughout the podcast generation pipeline.

Commit: db5832065d9298d6651bae726ab3fa6f190c2fec
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-02 08:32:50 -0700

    feat: implement Phase 2.3b - jobs://{task_id}/logs MCP resource
- Add jobs://{task_id}/logs resource in app/mcp_server.py
- Provides detailed logs with parsing and metadata
- Raw logs list and structured parsed logs
- Task status integration and log count
- Proper error handling for missing tasks (ValueError)
- Updated API documentation with logs resource info

- Add comprehensive test suite in test_phase2_3b_logs.py
- Test missing task error handling
- Test logs resource structure and validation
- Test consistency with job status resource
- All 3 tests pass with subprocess isolation pattern

- Update todo.md to mark Phase 2.3b as completed

The logs resource enables MCP clients to monitor detailed processing
information and debug podcast generation tasks.

Commit: c4552fecf3d3ef0ee1e86e1a36255559e7e459d9
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-02 08:13:36 -0700

    feat: Implement Phase 2.3a - Job Status MCP Resource
- Add jobs://{task_id}/status resource for comprehensive job tracking
- Returns task status, progress, timestamps, request summary, and artifacts
- Fix field mapping to use correct PodcastRequest model fields
- Add proper error handling for missing tasks
- Update API documentation with new job status resource
- Fix async context manager support in SimpleMCPTestClient
- Add comprehensive test suite with subprocess isolation
- Update todo.md to mark Phase 2.3a as completed

Tests: 2/3 passed (missing task handling ✅, tool consistency ✅)
Ready for Phase 2.3b (logs) and 2.3c (warnings) implementation

Commit: 27cecfe059afab718dc104ff3ef7d52e4773b4e8
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-02 07:37:28 -0700

    Complete Phase 2.2: Dynamic Podcast Resources - Add Outline Resource
✨ Added missing podcast://{task_id}/outline resource
- Reads structured outline JSON from episode.llm_podcast_outline_path
- Proper error handling for missing files, invalid JSON, task not found
- Consistent with existing transcript, audio, metadata resources

🧪 Comprehensive testing completed
- All 4 dynamic podcast resources verified working
- 100% test success rate for outline resource functionality
- Consistent error handling across all podcast resources

📋 Updated todo.md to mark Phase 2.2 as completed
- Dynamic podcast data resources now fully implemented
- Ready for Phase 2.3 job status resources

This completes the MCP resource ecosystem for podcast data access!

Commit: 8688fd68f671577282c85cf5dd127f4579021264
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-02 07:04:19 -0700

    Implement Phase 2.1: Static Resources - Complete MCP resource ecosystem
Added comprehensive static MCP resources:

🔧 config://app Resource:
- App metadata (name, version, description)
- Server configuration (port 8000, streamable-http, FastMCP 2.0)
- System limits (max URLs, concurrent tasks, file sizes)
- Feature flags (async/sync, languages, AI services)
- AI service details (Gemini, Google Cloud TTS, 30 voices)

📚 docs://api Resource:
- Complete tool documentation with parameters and returns
- All resource listings with descriptions
- Status values and workflow guidance
- Error handling and rate limit information

💡 examples://requests Resource:
- 5 practical example scenarios (basic, research, PDF, multilingual, Pydantic)
- Complete 4-step async workflow example
- Copy-paste ready request templates
- Best practice guidance for users

✅ Features:
- Self-documenting API through comprehensive docs
- User onboarding through practical examples
- System transparency through configuration exposure
- Enhanced MCP client discovery (4 total static resources)

✅ Testing:
- Created test_phase2_resources.py for validation
- 100% test success rate for all static resources
- Proper FastMCP resource object handling
- Complete Phase 2.1 verification

Phase 2.1 provides essential foundation for MCP client integration
with robust documentation, examples, and configuration discovery.

Commit: c804476a92cd27ec52d0586a7bfb7d9f0eb28df3
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-02 06:47:28 -0700

    Fix MCP async tests - all tests now passing
- Fixed get_task_status tool to properly access PodcastStatus model attributes
- Changed from dict access to attribute access (status_info.status vs status_info['status'])
- Used correct PodcastStatus attribute names (status_description, last_updated_at)
- Updated response field naming to match test expectations (progress_percentage)
- Fixed metadata resource timestamp formatting
- Added comprehensive MCP test suite with subprocess isolation
- All 6 MCP tests now pass with 100% success rate

Tests include:
- Tool listing and resource discovery
- Hello tool (string response handling)
- Supported formats resource (JSON parsing)
- Validation with default parameters
- Async podcast generation workflow
- Non-existent task error handling

Commit: beb488406d9866dcc568d0a5e769b6a6ed7c6425
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-01 22:02:30 -0700

    Implement MCP resources for podcast content access
- Add podcast://{task_id}/transcript resource for transcript access
- Add podcast://{task_id}/audio resource for audio file metadata
- Add podcast://{task_id}/metadata resource for complete episode info
- Add config://supported_formats resource for configuration details
- Fix MCP server startup to use SSE transport with Starlette app
- Complete Phase 1.5 (Resource Implementation)

Commit: 29cd421d517053f80df3fb141f63054456a747f2
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-01 21:34:22 -0700

    Implement FastMCP 2.0 async tools for podcast generation
- Fix FastMCP initialization and remove deprecated decorators
- Add async tools: generate_podcast_async and generate_podcast_async_pydantic
- Add get_task_status tool for querying async task progress
- Update error handling to return structured dicts
- Complete Phase 1.3 (Core Setup) and Phase 1.4 (Async Tools)

Commit: 61ad21aa8309fb8d1a6d75a26d2b9e278fb2a8ce
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-01 20:47:12 -0700

    Fix async executor shutdown issues in tests
- Implemented subprocess isolation strategy for running async tests
- Created run_cancellation_tests.py and run_webhook_tests.py test runners
- Each test now runs in isolated subprocess with fresh executors
- Added test_helpers.py with executor reset functions (kept for reference)
- Added comprehensive test files for cancellation and webhook features
- Updated app/main.py with minor endpoint adjustments
- All tests now pass successfully without executor shutdown errors

Commit: c8d9c8d88e3038d5028c96e8d4c502e95efa3e20
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-01 19:28:40 -0700

    Fix TaskRunner queue status tracking: Add lifetime task counter to correctly report total_submitted even after tasks complete

Commit: 5703e3d3a53d0507aac4ab4e8d7fe7e82f147c7d
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-01 17:21:29 -0700

    Add enhanced task management features (Phase 5.4 Step 4)
- Task Cancellation:
  - Added cancellation checkpoints throughout generation process
  - POST /status/{task_id}/cancel endpoint
  - Proper CancelledError handling and status updates

- Queue Management:
  - GET /queue/status endpoint for queue visibility
  - Shows active tasks, available slots, and metrics
  - Real-time task monitoring capabilities

- Webhook Support:
  - webhook_url field in PodcastRequest
  - Automatic notifications on completion/failure/cancellation
  - Retry logic with exponential backoff

- Test scripts for all new features
- aiohttp dependency added for webhook calls

Commit: 17ad6482c19df81b10576ef0a872e0499e48f584
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-01 16:57:29 -0700

    Implement true async processing for podcast generation (Phase 5.4)
- Add TaskRunner class for background task execution with ThreadPoolExecutor
- Implement async wrappers in podcast_workflow.py
- Update _generate_podcast_internal to spawn background tasks when async_mode=True
- Maintain backwards compatibility with existing sync API
- Add concurrency limits (max 3 concurrent tasks by default)
- Task submission, monitoring, and cancellation support

This allows generate_podcast_async() to return immediately with task_id while
podcast generation runs in background. Status can be tracked via StatusManager.

Commit: 54297364aabe1601e2d5d00c784341d42967a8d5
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-01 15:27:46 -0700

    feat: Enhance persona research with debate coach role and facts/statistics focus; fix test port numbers
- Updated persona research prompt to position AI as 'debate coach' for better persona preparation
- Added requirement to find facts, figures, and statistics to support positions
- Adjusted Points of Agreement/Conflict word count allocation to 30-50% (from 40-50%)
- Fixed test files to use port 8080 instead of 8000 (matching server configuration)

Commit: 2ac02c74edc1ba4e170fdac8d6e917a6f2fe2cb9
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-01 12:34:02 -0700

    feat: Implement database persistence for StatusManager (Phase 5.3 Stage 1)
- Created app/database.py with SQLModel integration for status persistence
- Refactored StatusManager to use SQLite database instead of in-memory storage
- Fixed circular imports by moving PodcastRequest to podcast_models.py
- Updated all REST API endpoints to work with database-backed status manager
- Added test_database_persistence.py to verify persistence across instances
- Added database files to .gitignore
- SQLite database (podcast_status.db) created automatically on startup
- All status data now persists across server restarts
- Ready for Stage 2: Cloud SQL deployment for production

Commit: 2730cab530710ade4c6f6e5c6922f7047cbf3a94
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-01 11:54:53 -0700

    Update todo.md: Mark Phase 5.2 as completed
- All REST API endpoints for status tracking implemented
- Added async podcast generation endpoint
- Created comprehensive test scripts
- All tests passing successfully

Commit: b111a30f2ff0f07f712bda20e41b7d8894c0f2e8
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-01 11:50:14 -0700

    Complete Phase 5.2: Add REST API endpoints for status tracking
- Add GET /status/{task_id} to retrieve specific task status
- Add GET /status with pagination support to list all task statuses
- Add DELETE /status/{task_id} to remove task status
- Add POST /generate/podcast_async/ for async podcast generation
- Fix status updates on early workflow failures (no content extracted)
- Add comprehensive test scripts for status endpoints
- Fix PodcastRequest field usage in tests

All status endpoints now working correctly with the async podcast generation workflow.

Commit: 9b4ad5a047cc659e8ac0bd4ae4d91f3804a4b779
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-01 11:18:51 -0700

    feat: Complete Phase 5.1 - Add comprehensive status updates throughout workflow
- Add status updates at all major processing stages:
  - Content extraction → analyzing_sources (15%)
  - Source analysis → researching_personas (30%)
  - Persona research → generating_outline (45%)
  - Outline generation → generating_dialogue (60%)
  - Dialogue generation → generating_audio_segments (75%)
  - Audio generation → incremental updates (75-90%)
  - Audio stitching → postprocessing_final_episode (95%)
  - Completion → completed (100%)

- Set artifact availability flags at each stage
- Store final PodcastEpisode in status.result_episode
- Fix update_artifacts() to use keyword arguments
- Improve error handling for undefined variables
- Update todo.md to mark Phase 5.1 as completed

Commit: 13b72d9afd4a73b3c0edb9c6969587be6160e7a5
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-01 10:55:42 -0700

    feat: Add status tracking and dual sync/async API support for podcast generation
- Created StatusManager for thread-safe in-memory status tracking
- Added PodcastStatus lifecycle management with progress tracking
- Refactored podcast_workflow.py to support both sync and async modes:
  - generate_podcast_from_source() returns PodcastEpisode (backwards compatible)
  - generate_podcast_async() returns task_id for status tracking
  - _generate_podcast_internal() handles both modes
- Added comprehensive test coverage for status manager and dual API modes
- Prepared foundation for future async background processing (Phase 4)

Commit: eb48fa83a8ccccd60bfd92ec3f2ff607fdbbbf4f
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-01 09:56:56 -0700

    feat: Add Pydantic models for async podcast task status
Defines PodcastTaskCreationResponse, PodcastStatus, ArtifactAvailability,
and PodcastProgressStatus literal in app/podcast_models.py to support
asynchronous podcast generation and status tracking for the MCP server.

Commit: 671aa9427b8f87a4f96925e1c8b35e05c29b628d
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-01 09:36:46 -0700

    Docs: Update designdoc1-8.md with latest version

Commit: 43bfbd2d7721f9f88630dab71d124fa1eb665949
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-01 09:23:36 -0700

    Feat: Initial setup for podcast generation tool (Phase 1.3)

Commit: 5efc4087c4b5293d2125f374a0655b8c57695ca9
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-01 07:44:21 -0700

    Update todo.md with comprehensive FastMCP implementation plan

Commit: b8e1cbccca74d90eeb4b92a8166d761142513df4
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-01 06:47:49 -0700

    Add versioned API documentation with updated endpoint details

Commit: d91d75d6427c7251426e971bbe87169de99ecee4
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-06-01 06:00:36 -0700

    Add API documentation and server script, update podcast workflow
- Created comprehensive API documentation for frontend integration
- Added Run_server_directly.py script for easy server management
- Updated podcast workflow implementation
- Updated audio utils for improved functionality
- Updated todo.md tracking progress

Commit: 974b3c81448cdc7079a193b6f0af16b7bab87640
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-31 23:09:01 -0700

    Implement voice deduplication for podcast personas to ensure Host has a distinct voice from guests. Move Host persona creation after guest personas are processed, expanded voice options per gender, and added tracking of assigned voices to prevent duplicates. Updated test URLs and prominent persons to test with Bush v. Gore Supreme Court case.

Commit: b67f649184f13074640d1940d7e7af1b949b5687
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-31 15:06:52 -0700

    Fix TTS voice differentiation for podcast personas
- Enhanced TTS voice cache to ensure unique parameter combinations
- Fixed JSON serialization in test script for datetime objects
- Improved voice gender detection using proper enum comparisons
- Created wider ranges of speaking rates and pitches per gender
- Added logic to prevent duplicate voice parameters
- Fixed indentation issues in voice cache refresh method

Commit: 2e652f8879d2386a2d6f1019f58d26797cf2db51
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-31 14:54:09 -0700

    Add support for Neutral gender voices in TTS service
- Enhanced voice caching to create Neutral voices by blending Male and Female voices
- Modified voice parameters (pitch=0.0, speaking_rate=1.0) for gender-neutral sound
- Updated cache format with timestamps and language-specific categorization
- Fixed type imports in audio_utils.py
- Added test_voice_integration.py to verify voice selection
- Successfully tested end-to-end with podcast generation

Commit: 3172c9d497e558040165b91c20bf89011d67e9b5
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-31 14:18:46 -0700

    Enhance TTS service to support specific voice IDs and voice parameters

Commit: 9961d50927942e7cc70724c213491f57788ad3a7
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-31 14:09:06 -0700

    Capitalize gender values for TTS service compatibility

Commit: 7ddcbe4061bd68ea232ce8819a0ac885280f86ce
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-31 13:58:56 -0700

    Enhanced TTS voice selection with detailed voice profiles and improved gender determination in PersonaResearch

Commit: 360561d18c2a84dc17d70f8a98301ec13871ee2a
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-31 13:40:57 -0700

    Enhanced PersonaResearch model with gender, invented name, and TTS voice ID detection during LLM persona research

Commit: e74081a2da6f953740cc7b90908fd54fd5bed5d0
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-31 12:30:30 -0700

    Add MCP Integration Design Document for Task 1.8

Commit: 671ff502dd4f17cd55357aee6462293e1a8cad9c
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-31 12:27:55 -0700

    Add detailed MCP Server and API implementation plan to todo.md

Commit: 0792c235c82a90cb0aa46c93961cddda8bfbf989
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-31 09:47:50 -0700

    Update todo.md to mark completed tasks and reflect recent progress

Commit: b6ca8f843dcfd5d37d4b3714aea54d5dd3c86c89
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-31 09:40:23 -0700

    Fix import paths for consistent execution across environments: Convert relative imports to absolute package imports, add script for import fixing, and ensure podcast generation works when run from project root directory

Commit: 78f5195bfc7f5aab50a0ad909091f6721d38ec4c
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-31 09:19:03 -0700

    Enhance podcast generation workflow: Adjust word count allocation to prioritize debate segments (40-50%), add audio file persistence from temp to permanent storage, and improve FastAPI endpoints for podcast playback

Commit: b8cb8a2da5265b712a8011384794a561c402f372
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-31 08:40:04 -0700

    Implement audio stitching for podcast generation
- Added AudioPathManager and AudioStitchingService in audio_utils.py
- Integrated audio processing into podcast_workflow.py
- Added configurable silence between segments (default 500ms)
- Implemented robust error handling with fallbacks
- Added FastAPI endpoints for audio playback
- Created structured directory storage for audio files
- Updated .gitignore to exclude generated audio files

Commit: 7d375c0e73d9f82c390b171e168d0b23c340ca9e
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-30 21:02:53 -0700

    fix: correct duration to word count calculation in podcast generation
- Fixed bug where word count was incorrectly calculated as duration_seconds/2
- Updated to use proper words-per-minute (150wpm) calculation
- Prioritizes target_word_count when available, with fallback to duration calculation
- Ensures podcasts are generated at the correct length

Commit: 81d546d60c8185196a6a66a899d1b2caf6a6305a
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-30 17:44:35 -0700

    Fix podcast dialogue length calculation for proper 30-minute generation

Commit: c9710fcf96a69e79f732fdbbe1ad06fdbe0e506e
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-30 16:31:39 -0700

    Enhance PersonaResearch prompt for richer podcast content
- Restructure prompt to separate general historical knowledge from source text analysis
- Add five clearly defined sections to the detailed_profile:
  1. Profile (250 words)
  2. Core viewpoints and beliefs (400 words)
  3. Topic analysis from persona perspective (1000 words)
  4. Debate preparation and advice (250 words)
  5. Speaking style and expression (250 words)
- Add guidance for handling topics with minimal connection to the persona's interests
- Add instructions to identify 2-6 primary topics from source text
- Enforce strict JSON formatting requirements with warning symbols
- Maintain compatibility with existing PersonaResearch model

Commit: 64098b2b313aa5baccf233d7ba2c8b037c20ad5e
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-30 16:27:55 -0700

    Enhance persona research JSON handling
1. Add clearer JSON formatting instructions to the prompt with warning symbols
2. Improve JSON extraction from LLM responses with advanced recovery
3. Maintain the same API contract while adding resilience to formatting issues
4. Better logging for JSON extraction recovery attempts

Commit: 649125b158f1e71ceecbe73f3e9e145a73e16a5b
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-30 10:17:20 -0700

    Strengthen content cue requirements in podcast outline generation
- Added warning symbols (⚠️) and explicit language to emphasize the 300-word minimum requirement
- Updated content cue specification to require extremely comprehensive content
- Modified prompt to indicate content cues shorter than 300 words will be rejected
- Enhanced bullet points to include questions/controversies and important theories
- Updated JSON field descriptions to reinforce the minimum word count requirement
- Testing confirms more detailed and comprehensive content cues

Commit: d4772fba258016eb96116753955df308475c4091
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-30 08:59:05 -0700

    Enhance content cue requirements in podcast outline generation prompt
- Added detailed requirements for content cues (100-150+ words)
- Specified key elements to include: talking points, questions, facts, dialog flow, and source references
- Updated JSON structure field descriptions to reinforce requirements
- Test confirms more detailed and comprehensive content cues are generated

Commit: e43f814b4ca2986b21d904fcc7b9465d8c9118ed
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-30 08:29:27 -0700

    Improve podcast length accuracy by enhancing LLM prompts and model display
- Made output format requirements more prominent in LLM prompt with warning symbols
- Added target_word_count field to OutlineSegment model
- Updated PodcastOutline.format_for_display to show target word count information
- Enhanced prompt to enforce correct inclusion of word count and duration fields

Commit: 89d7a97e8996187dfaf45362cbead376b3163164
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-30 07:19:43 -0700

    feat: Add podcast outline display and increase Gemini timeout
- Added format_for_display method to PodcastOutline model for better visibility
- Display full podcast outline in test script with segment durations
- Increased Gemini API timeout from 60s to 120s for better reliability with large inputs

Commit: 707d465ae671abc2c268c3811bf8659dccde8bd8
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-29 23:09:16 -0700

    feat: Implement and debug podcast workflow test script
- Successfully ran podcast_workflow_test.py to generate a full episode.
- Resolved TypeErrors and AttributeErrors related to persona_details_map, SourceAnalysis object handling, and PodcastRequest model fields.
- Ensured correct argument types (Pydantic objects vs JSON strings) are passed to LLM service methods.
- Added missing fields to the local PodcastRequest model in the test script.
- Refined logic for constructing persona_details_map and handling podcast length parameters.

Commit: a519ebfaf4429410bd6a745e980f170413000998
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-29 21:01:24 -0700

    Refactor LLM tests, fix podcast workflow tests, and update .gitignore

Commit: 53bc717d177f97070fab288f614b593a7a493bcf
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-29 15:15:38 -0700

    Simplify podcast generation process with single-segment approach
- Refactor outline generation to create a single comprehensive segment
- Update dialogue generation to process the entire podcast in one API call
- Fix lint errors in llm_service.py and improve code structure
- Add test_simplified_podcast.py to verify the changes

Commit: 52f6838e4ce805bb50d8835fc39a3e902fbb6b56
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-29 14:33:11 -0700

    Change llm_source_analysis_path to llm_source_analysis_paths (list of strings)

Commit: 09ec2bc0dc7e8b3f87c0e6642b29d6494af25e63
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-29 13:56:38 -0700

    Update PodcastRequest to support multiple URLs and integer podcast length

Commit: 7517fa5c8d4ec1cc304c054e12991577cf851ec0
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-29 13:23:44 -0700

    Refactor: Simplify PersonaResearch model and update tests
Consolidated `viewpoints`, `speaking_style`, and `key_quotes` in the `PersonaResearch` model into a single `detailed_profile` string field.

Updated `research_persona_async` in `llm_service.py` to align with the new model structure.

Modified tests in `test_podcast_workflow.py` and `test_llm_service.py` to:
- Use the new `detailed_profile` field in mock `PersonaResearch` objects.
- Ensure mock `SourceAnalysis` objects include the `detailed_analysis` field.
- Corrected assertions for comparing Pydantic model outputs with raw mock data.
- Ensured `test_generate_dialogue_async_success` provides segments to the outline for proper test execution.

Commit: 88575e40684c4688f77188bdc53bd93f76172d4b
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-29 12:45:49 -0700

    feat(llm): Enhance analyze_source_text_async with Markdown cleaning, Pydantic validation, and robust error handling. Add comprehensive unit tests for success and various failure scenarios.

Commit: dc4ead91fabf044fcc091dcc7b574cecd59a6322
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-29 12:06:27 -0700

    Test: Refine test_gta_for_source_analysis for accuracy
- Update test_gta_for_source_analysis in
  tests/test_generate_text_async.py to use SAMPLE_ANALYSIS_PROMPT.
- Align expected JSON output and assertions with the SourceAnalysis
  model structure to more accurately simulate the context of
  analyze_source_text_async.

Commit: 1b56212ff6a520e98d037c1820ba9be59d902335
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-29 11:54:00 -0700

    Test: Add comprehensive unit tests for generate_text_async
- Create new test file tests/test_generate_text_async.py.
- Add 7 unit tests covering multipart responses, single text responses,
  empty prompts, timeouts, no text content, prompt feedback blocks,
  and API errors for the generate_text_async method.
- Refactor tests/test_llm_service.py to remove generate_text_async
  tests and associated constants, which were moved to the new file.

Commit: 43fefff40a39988f881610930828ec7ab25f05a4
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-29 07:56:02 -0700

    Add timeout handling to LLM service to fix podcast workflow hang
This commit adds several improvements to fix the issue where the podcast generation
workflow was hanging indefinitely after content extraction:

1. Added proper timeout handling in generate_text_async method
2. Enhanced error handling with structured JSON error responses
3. Added detailed logging throughout for better diagnostics
4. Created test article and test script for verification

Not yet fully verified:
- Actual timeout behavior when API doesn't respond
- Complete workflow execution after timeout/error occurs
- Error handling for malformed API responses

The root issue was in analyze_source_text_async which was hanging indefinitely
without proper timeout handling during API calls.

Commit: b2462db00e046324b5dc5fdbf71ee2cb2e0399d9
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-29 00:57:12 -0700

    Implement segment-based dialogue generation
- Refine LLM dialogue writing to iterate through outline segments
- Create segment-specific prompt builder for targeted dialogue generation
- Add segment categorization (intro, main, conclusion) for proper ordering
- Implement speaker and gender mapping with fallback mechanisms
- Ensure consistent turn_id sequencing across segments
- Add detailed logging for segment-based generation progress
- All tests passing with new implementation

Commit: 67d840b149cbf522f360afea2ae564eee8df7bfb
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-29 00:48:50 -0700

    Implement LLM-driven detailed podcast outline generation with multi-segment support
- Add duration parsing from user-friendly strings to seconds
- Implement segment structure validation to ensure intro, body, conclusion
- Add time distribution logic based on PRD percentages (15% intro, 70% body, 15% conclusion)
- Create fallback mechanisms for when LLM output doesn't meet requirements
- Update prompt to emphasize time allocation requirements
- Add robust logging for segment structure and durations
- All tests passing with new implementation

Commit: de640d02e52a3cb2053c5c07bce8b74a3adf3a76
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-29 00:36:34 -0700

    Update todo.md to reflect completed test refactoring
- Mark test refactoring as completed in Code Cleanup section
- Add specific items for test_podcast_workflow.py and test_content_extractor.py refactoring
- Split remaining code cleanup tasks for better tracking

Commit: 431567f923f27c19bc1f08ac877d1daf49cd58e1
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-29 00:34:48 -0700

    Refactor content extractor tests for better maintainability
- Organize tests into three dedicated classes:
  - TestPdfExtraction
  - TestUrlContentExtraction
  - TestYouTubeTranscriptExtraction
- Add reusable fixtures for PDF files and mock responses
- Create utility methods for response setup and error verification
- Parameterize similar tests for HTTP errors and YouTube API errors
- Improve code clarity and reduce duplication
- All tests passing

Commit: 940305e7d9705b8aab6c3c864e3df1cf816e1534
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-29 00:30:00 -0700

    Refactor podcast workflow tests for better maintainability
- Add pytest fixtures for mock data (mock_podcast_data, mock_podcast_models)
- Create utility methods for test setup and verification
- Simplify E2E test with fixtures and clear section structure
- Consolidate error handling tests using parameterization
- Clean up excessive comments and improve code organization
- All tests passing

Commit: da20e5f3aca70a7f1b9089227593fef99837c9e6
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-29 00:22:23 -0700

    Refactor: Enhance LLM error handling & align podcast workflow tests
- Improved error handling and logging in llm_service.py for outline and dialogue generation.
- Initialized and correctly assigned llm_dialogue_turns_filepath in podcast_workflow.py.
- Adjusted e2e tests in test_podcast_workflow.py to align with current implementation (commented out TTS/audio path assertions, removed duplicated code).

Commit: fdead3bde190b2df9a8d0bbbf4383adfe27881b4
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-28 22:59:30 -0700

    feat: Integrate persona research into podcast generation and fix tests

Commit: a3c8f604b08219d43dd6a9cba282e9a8b64134ad
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-28 22:39:10 -0700

    Fix: Correct persona research logic and test integration
- Resolved TypeError in llm_service.main_test for research_persona_async.
- Implemented robust markdown stripping for LLM JSON responses in research_persona_async, fixing JSONDecodeError.
- Confirmed PodcastGeneratorService correctly calls research_persona_async.
- All regression tests (llm_service direct test and pytest suite) passing.

Commit: d24615df0d4503be76f512ea74dc3504a2ccc296
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-28 21:30:33 -0700

    Feat: Implement LLM persona research and refactor tests

Commit: f45dadd01186a701af235245d4c714aa4f1fdc11
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-28 20:55:54 -0700

    Fix: Align podcast workflow tests with placeholder implementation
Corrects issues in  within
 to accurately reflect the current
placeholder-driven state of the
method.

Key changes:
- Updated LLM service mocks to use  for script generation,
  as  is not a method of .
- Removed patches and mock assertions related to
  because audio combination logic is not yet implemented in the workflow.
- Adjusted the assertion for  to match the
  actual call signature (without explicit default arguments).
- Commented out assertions for LLM script generation ()
  and TTS () as these steps are currently bypassed
  by placeholder logic in the main workflow.

Commit: 7ad6547bfd74c3bc26d48994fd0e9cc4d7002ffc
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-28 20:25:59 -0700

    Refactor: Stabilize and enhance Podcast Workflow tests
This commit addresses several issues in the PodcastGeneratorService tests, ensuring all tests pass and accurately reflect the recent refactoring of content extraction logic.

Key changes include:
- Corrected mock object usage (e.g., using self.service.llm_service instead of outdated mock instance names).
- Fixed patch targets for content extraction functions.
- Ensured LLMService and GoogleCloudTtsService initializations within PodcastGeneratorService are correctly asserted. This was achieved by resetting class mocks and instantiating the service locally within the test_podcast_generator_service_initialization_success test method to isolate the assertion.
- Aligned test assertions for error scenarios, such as PDF path issues, to correctly expect an empty transcript as per the current workflow's error handling behavior.
- Resolved an AttributeError in the Pydantic error test by referencing the correct mock LLM service instance.

All 10 tests in tests/test_podcast_workflow.py now pass, confirming the stability of the podcast generation workflow after recent modifications to content extraction and service interactions.

Commit: 32798978cb71e3e433d4c929d1b1ce41f13cf400
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-28 20:01:50 -0700

    feat(workflow): Initial structure for PodcastGeneratorService (Task 1.7)
- Add app/podcast_workflow.py with PodcastGeneratorService class.
- Define Pydantic models for workflow data (PodcastEpisode, etc.).
- Add pydub to requirements.txt for audio processing.

Commit: 4f2522f5c3ca88039bec41e1b206e9df71b4d81c
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-28 20:00:31 -0700

    docs: Add design document for Core Podcast Generation Workflow (Task 1.7)

Commit: c8223e47d1626c7f6c5097952dc9c0e01879bde0
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-28 19:31:31 -0700

    refactor(todo): Restructure Phase 3 for LLM prompt iteration
- Align Phase 3 tasks with specific LLM service methods.
- Integrate testing directly into each prompt iteration task.
- Remove separate Task 3.4 (Testing).

Commit: 5c4954d4f3ff3c380f489a4c776bbab2b74ed641
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-28 18:22:09 -0700

    feat: Implement TTS service wrapper (Task 1.6)
- Add GoogleCloudTtsService for text-to-speech conversion.
- Implement voice selection based on gender (Male/Female/Default).
- Update .env handling for GOOGLE_APPLICATION_CREDENTIALS.
- Mark Task 1.6 as complete in todo.md.

Commit: b0dd4a856f1c9409c693f3be5b5dcdb1e91e57db
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-28 17:43:22 -0700

    docs: Mark API key management as complete in todo.md

Commit: 1f54cb62107c54e58619cc4e25f55b57069a14a1
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-28 17:41:56 -0700

    feat: Implement retry logic for LLM API calls
- Add tenacity to requirements.txt.
- Implement retry mechanism using tenacity for generate_text_async in
  GeminiService (llm_service.py) to handle transient API errors.
- Configure retries for specific Google API exceptions with exponential backoff.
- Add logging for retry attempts and final errors.
- Mark retry logic task as complete in todo.md.

Commit: a61b9543606a1fb6cd441e26cb6c77072bf21e96
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-28 17:36:08 -0700

    feat: Implement dialogue writing functionality
- Add dialogue writing requirements and draft LLM prompt to PRD (4.2.5, 4.2.5.1).
- Implement generate_dialogue_async method in GeminiService (llm_service.py)
  to generate podcast dialogue based on outline, source/persona docs,
  length, and prominent person details.
- Update main_test with test cases for dialogue generation (0 and 2 personas).
- Mark dialogue writing task as complete in todo.md.

Commit: 6fc79d5ede0ce88093df7294fb4c938eeb234229
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-28 17:07:02 -0700

    feat: Implement podcast outline generation
- Update LLMInteractionServiceWrapper (GeminiService) to include
  generate_podcast_outline_async method using PRD 4.2.4 prompt.
- Add parameters for desired length, prominent persons, and custom prompts.
- Update main_test to include test cases for new outline generation features.
- Update PRD with detailed podcast outline generation prompt.
- Update todo.md to mark outline generation task as complete.
- Ensure Python virtual environment 'venv' is used and ignored by Git.

Commit: 5ed92b10563d54a04ad068fac2dc4e8cb694b7bb
Author: Elliott Ng <elliott.ng@gmail.com>
Date:   2025-05-28 08:08:06 -0700

    Initial commit
